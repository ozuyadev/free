if not LPH_OBFUSCATED then
	getfenv().LPH_NO_VIRTUALIZE = function(f) return f end
	getfenv().LPH_JIT_MAX = function(f) return f end
end





LPH_JIT_MAX(function()
	
	local Hooks = {}
	local Targets = {}
	local Whitelisted = {
		{655, 775, 724, 633, 891},
		{760, 760, 771, 665, 898},
		{660, 759, 751, 863, 771},
	}
	
	local function TableEquality(x, y)
		if (#x ~= #y) then
			return false
		end
	
		for i, v in next, x do
			if (y[i] ~= v) then
				return false
			end
		end
	
		return true
	end
	
	LPH_NO_VIRTUALIZE(function()
		for i, v in next, getgc(true) do
			if (type(v) == "function") then
				local ScriptTrace, Line = debug.info(v, "sl")
		
				if string.find(ScriptTrace, "PlayerModule.LocalScript") and table.find({42, 51, 61}, Line) then
					table.insert(Targets, v)
				end
			end
			
			if (type(v) == "table") and (rawlen(v) == 19) and getrawmetatable(v) then
				Targets.__call = rawget(getrawmetatable(v), "__call")
			end
		end
	end)()
	
	
	if not (Targets[1] and Targets[2] and Targets[3] and Targets.__call) then
		warn("Bypass failed to load properly")
		return
	end
	
	local ScriptPath = debug.info(Targets[1], "s")
	
	Hooks.debug_info = hookfunction(debug.info, LPH_NO_VIRTUALIZE(function(...)
		if not checkcaller() and TableEquality({...}, {2, "s"}) then
			return ScriptPath
		end
	
		return Hooks.debug_info(...)
	end))
	
	hookfunction(Targets[1], LPH_NO_VIRTUALIZE(function() end))
	hookfunction(Targets[2], LPH_NO_VIRTUALIZE(function() end))
	hookfunction(Targets[3], LPH_NO_VIRTUALIZE(function() end))
	
	Hooks.__call = hookfunction(Targets.__call, LPH_NO_VIRTUALIZE(function(self, ...)
		if
			TableEquality(Whitelisted[1], {...}) or
			TableEquality(Whitelisted[2], {...}) or
			TableEquality(Whitelisted[3], {...})
		then
			return Hooks.__call(self, ...)
		end
	end))
	
	task.wait(3)
	
end)()
	

-- Load Zypher UI Library
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/YungPloits/Random/main/ZypherModded"))()
print(library)  -- Debug: Check if library is loaded

if not library then
    error("Failed to load Zypher UI Library")
end

-- Create Main UI Window
local success, main = pcall(function()
    return library:CreateMain({
        projName = "Tyrant Hub",
        Resizable = true,
        MinSize = UDim2.new(0, 400, 0, 400),
        MaxSize = UDim2.new(0, 750, 0, 500),
    })
end)

if not success then
    error("Failed to create main UI window: " .. main)
end

-- Create Tabs and Sections
local catchingCategory = main:CreateCategory("Catching")
local catchingSection = catchingCategory:CreateSection("Magnets")

local playerCategory = main:CreateCategory("Player")
local playerSection = playerCategory:CreateSection("Settings")

local miscCategory = main:CreateCategory("Misc")
local miscSection = miscCategory:CreateSection("Ball Landing Prediction")

-- Initialize Variables
local Workspace = game:GetService("Workspace")
local magson = false
local range = 10
local delayon = false
local delay = 0.1

local FootballLandingPredictions = false
local predictionColor = Color3.fromRGB(255, 255, 255)
local eventConnection

-- Function to Handle Magnets
local function handleMagnets()
    Workspace.ChildAdded:Connect(function(child)
        if child.Name == "Football" and child:IsA("BasePart") then
            if magson then
                if delayon then
                    wait(delay)
                end
                child.Size = Vector3.new(range, range, range)
                child.CanCollide = false
            else
                child.Size = Vector3.new(0.85, 1.2, 0.85)
                child.CanCollide = true
            end
        end
    end)
end

-- Add UI Elements for Magnets
local successToggle, errToggle = pcall(function()
    catchingSection:Create("Toggle", "Magnets", function(state)
        magson = state
        handleMagnets()
    end, { default = false })
end)

if not successToggle then
    error("Failed to create Magnets toggle: " .. errToggle)
end

local successSliderRange, errSliderRange = pcall(function()
    catchingSection:Create("Slider", "Range", function(value)
        range = value
    end, { min = 1, max = 25, default = 10, increment = 1, valueName = "Range" })
end)

if not successSliderRange then
    error("Failed to create Range slider: " .. errSliderRange)
end

local successToggleDelay, errToggleDelay = pcall(function()
    catchingSection:Create("Toggle", "Magnets Delay", function(state)
        delayon = state
    end, { default = false })
end)

if not successToggleDelay then
    error("Failed to create Magnets Delay toggle: " .. errToggleDelay)
end

local successSliderDelay, errSliderDelay = pcall(function()
    catchingSection:Create("Slider", "Delay", function(value)
        delay = value
    end, { min = 0, max = 1, default = 0.1, increment = 0.1, valueName = "Delay" })
end)

if not successSliderDelay then
    error("Failed to create Delay slider: " .. errSliderDelay)
end

-- Add UI Elements for Player Settings
local successToggleJump, errToggleJump = pcall(function()
    playerSection:Create("Toggle", "JumpPower", function(state)
        local player = game:GetService("Players").LocalPlayer
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.JumpPower = state and 50 or 0
            end
        end
    end, { default = false })
end)

if not successToggleJump then
    error("Failed to create JumpPower toggle: " .. errToggleJump)
end

local successSliderJump, errSliderJump = pcall(function()
    playerSection:Create("Slider", "JumpPower", function(value)
        local player = game.Players.LocalPlayer
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.JumpPower = value
            end
        end
    end, { min = 50, max = 60, default = 50, increment = 1, valueName = "JumpPower" })
end)

if not successSliderJump then
    error("Failed to create JumpPower slider: " .. errSliderJump)
end

local successToggleWalk, errToggleWalk = pcall(function()
    playerSection:Create("Toggle", "WalkSpeed", function(state)
        local player = game.Players.LocalPlayer
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = state and 20 or 0
            end
        end
    end, { default = false })
end)

if not successToggleWalk then
    error("Failed to create WalkSpeed toggle: " .. errToggleWalk)
end

local successSliderWalk, errSliderWalk = pcall(function()
    playerSection:Create("Slider", "WalkSpeed", function(value)
        local player = game.Players.LocalPlayer
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = value
            end
        end
    end, { min = 20, max = 23, default = 20, increment = 1, valueName = "WalkSpeed" })
end)

if not successSliderWalk then
    error("Failed to create WalkSpeed slider: " .. errSliderWalk)
end

-- Function for Beam Projectile Calculation with 7-Second Disappearance
local function beamProjectile(g, v0, x0, t1, segments)
    local dt = t1 / segments
    local points = {}

    for i = 0, segments do
        local t = i * dt
        local p = 0.5 * g * t * t + v0 * t + x0
        table.insert(points, p)
    end

    return points
end

local function createBeam(points)
    for i = 1, #points - 1 do
        local a0 = Instance.new("Attachment")
        local a1 = Instance.new("Attachment")
        a0.Position = points[i]
        a1.Position = points[i + 1]

        local beam = Instance.new("Beam")
        beam.Color = ColorSequence.new(predictionColor)
        beam.Transparency = NumberSequence.new(0, 0)
        beam.Segments = 10
        beam.Attachment0 = a0
        beam.Attachment1 = a1
        beam.Parent = workspace.Terrain
        a0.Parent = workspace.Terrain
        a1.Parent = workspace.Terrain

        task.delay(7, function()
            beam.Enabled = false
            beam:Destroy()
        end)
    end
end

local function setupPredictionUI()
    miscSection:Create("Toggle", "Ball Landing Prediction", function(state)
        FootballLandingPredictions = state
        if FootballLandingPredictions then
            if eventConnection then
                eventConnection:Disconnect()
            end

            eventConnection = workspace.ChildAdded:Connect(function(b)
                if b.Name == "Football" and b:IsA("BasePart") then
                    task.wait()
                    local vel = b.Velocity
                    local pos = b.Position
                    local points = beamProjectile(Vector3.new(0, -28, 0), vel, pos, 10, 100)
                    createBeam(points)
                end
            end)
        elseif eventConnection then
            eventConnection:Disconnect()
            eventConnection = nil
        end
    end, { default = false })

    miscSection:Create("Colorpicker", "Prediction Color", function(color)
        predictionColor = color
    end, { default = Color3.fromRGB(255, 255, 255) })
end

setupPredictionUI()
